<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="stemming_8cpp" kind="file" language="C++">
    <compoundname>stemming.cpp</compoundname>
    <includes local="no">bits/stdc++.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">fstream</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">ctype.h</includes>
    <includedby refid="dictionary_8cpp" local="yes">dictionary.cpp</includedby>
    <incdepgraph>
      <node id="23">
        <label>bits/stdc++.h</label>
      </node>
      <node id="24">
        <label>stdlib.h</label>
      </node>
      <node id="26">
        <label>fstream</label>
      </node>
      <node id="25">
        <label>string.h</label>
      </node>
      <node id="28">
        <label>ctype.h</label>
      </node>
      <node id="22">
        <label>stemming.cpp</label>
        <link refid="stemming_8cpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="31">
        <label>searcheng.cpp</label>
        <link refid="searcheng_8cpp"/>
      </node>
      <node id="30">
        <label>dictionary.cpp</label>
        <link refid="dictionary_8cpp"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>stemming.cpp</label>
        <link refid="stemming_8cpp"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structstemmer" prot="public">stemmer</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="stemming_8cpp_1aa8cecfc5c5c054d2875c03e77b7be15d" prot="public" static="no">
        <name>TRUE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="22" column="9" bodyfile="stemming.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stemming_8cpp_1aa93f0eb578d23995850d61f7d61c55c1" prot="public" static="no">
        <name>FALSE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="23" column="9" bodyfile="stemming.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stemming_8cpp_1af735670d9b1cd3dfa2d927db387f7123" prot="public" static="no">
        <name>INC</name>
        <initializer>50           /* size units in which s is increased */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="368" column="9" bodyfile="stemming.cpp" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stemming_8cpp_1a41e26001c91e6d127101f7086fa317a7" prot="public" static="no">
        <name>LETTER</name>
        <param><defname>ch</defname></param>
        <initializer>(isupper(ch) || islower(ch))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="371" column="9" bodyfile="stemming.cpp" bodystart="371" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="stemming_8cpp_1ab51cd24d34f6509eafb5e059f4c7d10e" prot="public" static="yes" mutable="no">
        <type>char *</type>
        <definition>char* s</definition>
        <argsstring></argsstring>
        <name>s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="366" column="1" bodyfile="stemming.cpp" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stemming_8cpp_1a30b7a5a2e5f4f222a8dd45869d83c80a" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int i_max</definition>
        <argsstring></argsstring>
        <name>i_max</name>
        <initializer>= <ref refid="stemming_8cpp_1af735670d9b1cd3dfa2d927db387f7123" kindref="member">INC</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="369" column="1" bodyfile="stemming.cpp" bodystart="369" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stemming_8cpp_1aaf7655b3d00411800055563fdefcf43e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
        <definition>struct stemmer * create_stemmer</definition>
        <argsstring>(void)</argsstring>
        <name>create_stemmer</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="12" column="1" bodyfile="stemming.cpp" bodystart="55" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1a23018baae747f0d163da2a2b7fe91ac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_stemmer</definition>
        <argsstring>(struct stemmer *z)</argsstring>
        <name>free_stemmer</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="13" column="1" bodyfile="stemming.cpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1a9adc1c124ef5b0c5a0ebee4f5c7c60d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stem</definition>
        <argsstring>(struct stemmer *z, char *b, int k)</argsstring>
        <name>stem</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="15" column="1" bodyfile="stemming.cpp" bodystart="343" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1a869319436b8d46811e87fa40a9b3a1d4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int cons</definition>
        <argsstring>(struct stemmer *z, int i)</argsstring>
        <name>cons</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="71" column="1" bodyfile="stemming.cpp" bodystart="71" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1af18c9d38822a4d3b8d8ef37cc1447d82" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int m</definition>
        <argsstring>(struct stemmer *z)</argsstring>
        <name>m</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="90" column="1" bodyfile="stemming.cpp" bodystart="90" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1acd26f54da909a96bfaf31d0e7facd8ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int vowelinstem</definition>
        <argsstring>(struct stemmer *z)</argsstring>
        <name>vowelinstem</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="118" column="1" bodyfile="stemming.cpp" bodystart="118" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1a584799d58aaba2e156c097a70294b73d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int doublec</definition>
        <argsstring>(struct stemmer *z, int j)</argsstring>
        <name>doublec</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="127" column="1" bodyfile="stemming.cpp" bodystart="127" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1a5078b5499a42f9424956febfd1766905" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int cvc</definition>
        <argsstring>(struct stemmer *z, int i)</argsstring>
        <name>cvc</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="144" column="1" bodyfile="stemming.cpp" bodystart="144" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1a841e952d8d4dda6f53b6c707d4c23a5d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ends</definition>
        <argsstring>(struct stemmer *z, char *s)</argsstring>
        <name>ends</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="154" column="1" bodyfile="stemming.cpp" bodystart="154" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1aa9b0a294c9c212fa65b73fd6b24a837f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void setto</definition>
        <argsstring>(struct stemmer *z, char *s)</argsstring>
        <name>setto</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="168" column="1" bodyfile="stemming.cpp" bodystart="168" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1a7f76e589f30343ae402110e72059b4b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void r</definition>
        <argsstring>(struct stemmer *z, char *s)</argsstring>
        <name>r</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="177" column="1" bodyfile="stemming.cpp" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1a721e5f5ef4e77f70f3d79bbf78d2d6da" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void step1ab</definition>
        <argsstring>(struct stemmer *z)</argsstring>
        <name>step1ab</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="201" column="1" bodyfile="stemming.cpp" bodystart="201" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1a45547eb6aafaa6ab647e0e355e65a726" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void step1c</definition>
        <argsstring>(struct stemmer *z)</argsstring>
        <name>step1c</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="227" column="1" bodyfile="stemming.cpp" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1a2a6d27c833a57c7b62644c3b2ff269f7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void step2</definition>
        <argsstring>(struct stemmer *z)</argsstring>
        <name>step2</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="237" column="1" bodyfile="stemming.cpp" bodystart="237" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1a18ff7ffe1dbdee5ab4c84f22765f35a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void step3</definition>
        <argsstring>(struct stemmer *z)</argsstring>
        <name>step3</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="278" column="1" bodyfile="stemming.cpp" bodystart="278" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1a2578370088c37cf31c2daa75dd42beb6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void step4</definition>
        <argsstring>(struct stemmer *z)</argsstring>
        <name>step4</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="295" column="1" bodyfile="stemming.cpp" bodystart="295" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1ad087e99e8116bdfbe9e6873f1769726f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void step5</definition>
        <argsstring>(struct stemmer *z)</argsstring>
        <name>step5</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="325" column="1" bodyfile="stemming.cpp" bodystart="325" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1ace84d1929c729aba783d284e05952f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stemfile</definition>
        <argsstring>(struct stemmer *z, FILE *f)</argsstring>
        <name>stemfile</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="373" column="1" bodyfile="stemming.cpp" bodystart="373" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="stemming_8cpp_1a554aac5597c2ca775a8e32704d65199d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string stemstring</definition>
        <argsstring>(struct stemmer *z, string f)</argsstring>
        <name>stemstring</name>
        <param>
          <type>struct <ref refid="structstemmer" kindref="compound">stemmer</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>string</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stemming.cpp" line="404" column="1" bodyfile="stemming.cpp" bodystart="404" bodyend="433"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include&lt;bits/stdc++.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>malloc,<sp/>free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>memcmp,<sp/>memmove<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>You<sp/>will<sp/>probably<sp/>want<sp/>to<sp/>move<sp/>the<sp/>following<sp/>declarations<sp/>to<sp/>a<sp/>central</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>header<sp/>file.</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstemmer" kindref="compound">stemmer</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//structure<sp/>for<sp/>stemmer<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/><ref refid="stemming_8cpp_1aaf7655b3d00411800055563fdefcf43e" kindref="member">create_stemmer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1a23018baae747f0d163da2a2b7fe91ac1" kindref="member">free_stemmer</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1a9adc1c124ef5b0c5a0ebee4f5c7c60d9" kindref="member">stem</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>main<sp/>part<sp/>of<sp/>the<sp/>stemming<sp/>algorithm<sp/>starts<sp/>here.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TRUE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FALSE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>stemmer<sp/>is<sp/>a<sp/>structure<sp/>for<sp/>a<sp/>few<sp/>local<sp/>bits<sp/>of<sp/>data,</highlight></codeline>
<codeline lineno="26"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="structstemmer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>buffer<sp/>for<sp/>word<sp/>to<sp/>be<sp/>stemmed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>offset<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>a<sp/>general<sp/>offset<sp/>into<sp/>the<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Member<sp/>b<sp/>is<sp/>a<sp/>buffer<sp/>holding<sp/>a<sp/>word<sp/>to<sp/>be<sp/>stemmed.<sp/>The<sp/>letters<sp/>are<sp/>in</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/>b[0],<sp/>b[1]<sp/>...<sp/>ending<sp/>at<sp/>b[z-&gt;k].<sp/>Member<sp/>k<sp/>is<sp/>readjusted<sp/>downwards<sp/>as</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/>the<sp/>stemming<sp/>progresses.<sp/>Zero<sp/>termination<sp/>is<sp/>not<sp/>in<sp/>fact<sp/>used<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/>algorithm.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/>Note<sp/>that<sp/>only<sp/>lower<sp/>case<sp/>sequences<sp/>are<sp/>stemmed.<sp/>Forcing<sp/>to<sp/>lower<sp/>case</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/>should<sp/>be<sp/>done<sp/>before<sp/>stem(...)<sp/>is<sp/>called.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/>Typical<sp/>usage<sp/>is:</highlight></codeline>
<codeline lineno="45"><highlight class="comment"></highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>stemmer<sp/>*<sp/>z<sp/>=<sp/>create_stemmer();</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>b[]<sp/>=<sp/>&quot;pencils&quot;;</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>res<sp/>=<sp/>stem(z,<sp/>b,<sp/>6);</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/-<sp/>stem<sp/>the<sp/>7<sp/>characters<sp/>of<sp/>b[0]<sp/>to<sp/>b[6].<sp/>The<sp/>result,<sp/>res,</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>be<sp/>5<sp/>(the<sp/>&apos;s&apos;<sp/>is<sp/>removed).<sp/>-/</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_stemmer(z);</highlight></codeline>
<codeline lineno="52"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/><ref refid="stemming_8cpp_1aaf7655b3d00411800055563fdefcf43e" kindref="member">create_stemmer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref>));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>assume<sp/>malloc<sp/>succeeds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1a23018baae747f0d163da2a2b7fe91ac1" kindref="member">free_stemmer</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>free(z);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>cons(z,<sp/>i)<sp/>is<sp/>TRUE<sp/>&lt;=&gt;<sp/>b[i]<sp/>is<sp/>a<sp/>consonant.<sp/>(&apos;b&apos;<sp/>means<sp/>&apos;z-&gt;b&apos;,<sp/>but<sp/>here</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/>and<sp/>below<sp/>we<sp/>drop<sp/>&apos;z-&gt;&apos;<sp/>in<sp/>comments.</highlight></codeline>
<codeline lineno="69"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cons(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{<sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(z-&gt;<ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref>[i])</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/>?<sp/><ref refid="stemming_8cpp_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref><sp/>:<sp/>!cons(z,<sp/>i<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>m(z)<sp/>measures<sp/>the<sp/>number<sp/>of<sp/>consonant<sp/>sequences<sp/>between<sp/>0<sp/>and<sp/>j.<sp/>if<sp/>c<sp/>is</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/>a<sp/>consonant<sp/>sequence<sp/>and<sp/>v<sp/>a<sp/>vowel<sp/>sequence,<sp/>and<sp/>&lt;..&gt;<sp/>indicates<sp/>arbitrary</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/>presence,</highlight></codeline>
<codeline lineno="82"><highlight class="comment"></highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;c&gt;&lt;v&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>gives<sp/>0</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;c&gt;vc&lt;v&gt;<sp/><sp/><sp/><sp/><sp/>gives<sp/>1</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;c&gt;vcvc&lt;v&gt;<sp/><sp/><sp/>gives<sp/>2</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;c&gt;vcvcvc&lt;v&gt;<sp/>gives<sp/>3</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>....</highlight></codeline>
<codeline lineno="88"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstemmer_1a024d42a47e06bd5207e2494cbfefbf2f" kindref="member">j</ref><sp/>=<sp/>z-&gt;<ref refid="structstemmer_1a024d42a47e06bd5207e2494cbfefbf2f" kindref="member">j</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="stemming_8cpp_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>j)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>cons(z,<sp/>i))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>i++;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="stemming_8cpp_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="stemming_8cpp_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>j)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cons(z,<sp/>i))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n++;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="stemming_8cpp_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>j)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>cons(z,<sp/>i))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vowelinstem(z)<sp/>is<sp/>TRUE<sp/>&lt;=&gt;<sp/>0,...j<sp/>contains<sp/>a<sp/>vowel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vowelinstem(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstemmer_1a024d42a47e06bd5207e2494cbfefbf2f" kindref="member">j</ref><sp/>=<sp/>z-&gt;<ref refid="structstemmer_1a024d42a47e06bd5207e2494cbfefbf2f" kindref="member">j</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/><ref refid="structstemmer_1a024d42a47e06bd5207e2494cbfefbf2f" kindref="member">j</ref>;<sp/>i++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>cons(z,<sp/>i))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>doublec(z,<sp/>j)<sp/>is<sp/>TRUE<sp/>&lt;=&gt;<sp/>j,(j-1)<sp/>contain<sp/>a<sp/>double<sp/>consonant.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>doublec(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstemmer_1a024d42a47e06bd5207e2494cbfefbf2f" kindref="member">j</ref>)</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref><sp/>=<sp/>z-&gt;<ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b[j]<sp/>!=<sp/>b[j<sp/>-<sp/>1])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cons(z,<sp/>j);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>cvc(z,<sp/>i)<sp/>is<sp/>TRUE<sp/>&lt;=&gt;<sp/>i-2,i-1,i<sp/>has<sp/>the<sp/>form<sp/>consonant<sp/>-<sp/>vowel<sp/>-<sp/>consonant</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/>and<sp/>also<sp/>if<sp/>the<sp/>second<sp/>c<sp/>is<sp/>not<sp/>w,x<sp/>or<sp/>y.<sp/>this<sp/>is<sp/>used<sp/>when<sp/>trying<sp/>to</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/>restore<sp/>an<sp/>e<sp/>at<sp/>the<sp/>end<sp/>of<sp/>a<sp/>short<sp/>word.<sp/>e.g.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"></highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>cav(e),<sp/>lov(e),<sp/>hop(e),<sp/>crim(e),<sp/>but</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>snow,<sp/>box,<sp/>tray.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"></highlight></codeline>
<codeline lineno="142"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cvc(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>2<sp/>||<sp/>!cons(z,<sp/>i)<sp/>||<sp/>cons(z,<sp/>i<sp/>-<sp/>1)<sp/>||<sp/>!cons(z,<sp/>i<sp/>-<sp/>2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>z-&gt;<ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref>[i];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/><sp/>==<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal"><sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal"><sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ends(z,<sp/>s)<sp/>is<sp/>TRUE<sp/>&lt;=&gt;<sp/>0,...k<sp/>ends<sp/>with<sp/>the<sp/>string<sp/>s.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ends(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>s)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref><sp/>=<sp/>z-&gt;<ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref><sp/>=<sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[length]<sp/>!=<sp/>b[k])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;<sp/></highlight><highlight class="comment">/*<sp/>tiny<sp/>speed-up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/>k<sp/>+<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(b<sp/>+<sp/>k<sp/>-<sp/>length<sp/>+<sp/>1,<sp/>s<sp/>+<sp/>1,<sp/>length)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/>z-&gt;<ref refid="structstemmer_1a024d42a47e06bd5207e2494cbfefbf2f" kindref="member">j</ref><sp/>=<sp/>k-length;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>setto(z,<sp/>s)<sp/>sets<sp/>(j+1),...k<sp/>to<sp/>the<sp/>characters<sp/>in<sp/>the<sp/>string<sp/>s,<sp/>readjusting</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/>k.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setto(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>s)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstemmer_1a024d42a47e06bd5207e2494cbfefbf2f" kindref="member">j</ref><sp/>=<sp/>z-&gt;<ref refid="structstemmer_1a024d42a47e06bd5207e2494cbfefbf2f" kindref="member">j</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/>memmove(z-&gt;<ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref><sp/>+<sp/>j<sp/>+<sp/>1,<sp/>s<sp/>+<sp/>1,<sp/>length);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref><sp/>=<sp/>j+length;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r(z,<sp/>s)<sp/>is<sp/>used<sp/>further<sp/>down.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>r(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m(z)<sp/>&gt;<sp/>0)<sp/>setto(z,<sp/>s);<sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>step1ab(z)<sp/>gets<sp/>rid<sp/>of<sp/>plurals<sp/>and<sp/>-ed<sp/>or<sp/>-ing.<sp/>e.g.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"></highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caresses<sp/><sp/>-&gt;<sp/><sp/>caress</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ponies<sp/><sp/><sp/><sp/>-&gt;<sp/><sp/>poni</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ties<sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/><sp/>ti</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caress<sp/><sp/><sp/><sp/>-&gt;<sp/><sp/>caress</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cats<sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/><sp/>cat</highlight></codeline>
<codeline lineno="186"><highlight class="comment"></highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feed<sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/><sp/>feed</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agreed<sp/><sp/><sp/><sp/>-&gt;<sp/><sp/>agree</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disabled<sp/><sp/>-&gt;<sp/><sp/>disable</highlight></codeline>
<codeline lineno="190"><highlight class="comment"></highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matting<sp/><sp/><sp/>-&gt;<sp/><sp/>mat</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mating<sp/><sp/><sp/><sp/>-&gt;<sp/><sp/>mate</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meeting<sp/><sp/><sp/>-&gt;<sp/><sp/>meet</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>milling<sp/><sp/><sp/>-&gt;<sp/><sp/>mill</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messing<sp/><sp/><sp/>-&gt;<sp/><sp/>mess</highlight></codeline>
<codeline lineno="196"><highlight class="comment"></highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meetings<sp/><sp/>-&gt;<sp/><sp/>meet</highlight></codeline>
<codeline lineno="198"><highlight class="comment"></highlight></codeline>
<codeline lineno="199"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>step1ab(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref><sp/>=<sp/>z-&gt;<ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b[z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;sses&quot;</highlight><highlight class="normal">))<sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref><sp/>-=<sp/>2;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ies&quot;</highlight><highlight class="normal">))<sp/>setto(z,<sp/></highlight><highlight class="stringliteral">&quot;\01&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b[z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref><sp/>-<sp/>1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">)<sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>--;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;eed&quot;</highlight><highlight class="normal">))<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m(z)<sp/>&gt;<sp/>0)<sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>--;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\02&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ed&quot;</highlight><highlight class="normal">)<sp/>||<sp/>ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ing&quot;</highlight><highlight class="normal">))<sp/>&amp;&amp;<sp/>vowelinstem(z))</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref><sp/>=<sp/>z-&gt;<ref refid="structstemmer_1a024d42a47e06bd5207e2494cbfefbf2f" kindref="member">j</ref>;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\02&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;at&quot;</highlight><highlight class="normal">))<sp/>setto(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ate&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\02&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;bl&quot;</highlight><highlight class="normal">))<sp/>setto(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ble&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\02&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;iz&quot;</highlight><highlight class="normal">))<sp/>setto(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ize&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doublec(z,<sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>))</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>--;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>b[z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal"><sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>++;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m(z)<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>cvc(z,<sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>))<sp/>setto(z,<sp/></highlight><highlight class="stringliteral">&quot;\01&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>step1c(z)<sp/>turns<sp/>terminal<sp/>y<sp/>to<sp/>i<sp/>when<sp/>there<sp/>is<sp/>another<sp/>vowel<sp/>in<sp/>the<sp/>stem.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>step1c(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z)</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\01&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>vowelinstem(z))<sp/>z-&gt;<ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref>[z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>step2(z)<sp/>maps<sp/>double<sp/>suffices<sp/>to<sp/>single<sp/>ones.<sp/>so<sp/>-ization<sp/>(<sp/>=<sp/>-ize<sp/>plus</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/>-ation)<sp/>maps<sp/>to<sp/>-ize<sp/>etc.<sp/>note<sp/>that<sp/>the<sp/>string<sp/>before<sp/>the<sp/>suffix<sp/>must<sp/>give</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/>m(z)<sp/>&gt;<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>step2(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z)<sp/>{<sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(z-&gt;<ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref>[z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>-1])</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\07&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ational&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ate&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\06&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;tional&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;tion&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;enci&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ence&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;anci&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ance&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;izer&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ize&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;bli&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ble&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="comment">/*-DEPARTURE-*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>match<sp/>the<sp/>published<sp/>algorithm,<sp/>replace<sp/>this<sp/>line<sp/>with</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>&apos;l&apos;:<sp/>if<sp/>(ends(z,<sp/>&quot;\04&quot;<sp/>&quot;abli&quot;))<sp/>{<sp/>r(z,<sp/>&quot;\04&quot;<sp/>&quot;able&quot;);<sp/>break;<sp/>}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alli&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\02&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;al&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\05&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;entli&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ent&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;eli&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\01&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\05&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ousli&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ous&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\07&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ization&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ize&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\05&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ation&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ate&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ator&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ate&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\05&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alism&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\02&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;al&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\07&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;iveness&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ive&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\07&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;fulness&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ful&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\07&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ousness&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ous&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\05&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;aliti&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\02&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;al&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\05&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;iviti&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ive&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\06&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;biliti&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ble&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;logi&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;log&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="comment">/*-DEPARTURE-*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>match<sp/>the<sp/>published<sp/>algorithm,<sp/>delete<sp/>this<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">}<sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>step3(z)<sp/>deals<sp/>with<sp/>-ic-,<sp/>-full,<sp/>-ness<sp/>etc.<sp/>similar<sp/>strategy<sp/>to<sp/>step2.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>step3(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z)<sp/>{<sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(z-&gt;<ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref>[z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>])</highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\05&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;icate&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\02&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ic&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\05&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ative&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\00&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\05&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;alize&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\02&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;al&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\05&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;iciti&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\02&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ic&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ical&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\02&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ic&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ful&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\00&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ness&quot;</highlight><highlight class="normal">))<sp/>{<sp/>r(z,<sp/></highlight><highlight class="stringliteral">&quot;\00&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}<sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>step4(z)<sp/>takes<sp/>off<sp/>-ant,<sp/>-ence<sp/>etc.,<sp/>in<sp/>context<sp/>&lt;c&gt;vcvc&lt;v&gt;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>step4(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{<sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(z-&gt;<ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref>[z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>-1])</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\02&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;al&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ance&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ence&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\02&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;er&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\02&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ic&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;able&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ible&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ant&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\05&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ement&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\04&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ment&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ent&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ion&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>z-&gt;<ref refid="structstemmer_1a024d42a47e06bd5207e2494cbfefbf2f" kindref="member">j</ref><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>(z-&gt;<ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref>[z-&gt;<ref refid="structstemmer_1a024d42a47e06bd5207e2494cbfefbf2f" kindref="member">j</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>||<sp/>z-&gt;<ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref>[z-&gt;<ref refid="structstemmer_1a024d42a47e06bd5207e2494cbfefbf2f" kindref="member">j</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\02&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ou&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>takes<sp/>care<sp/>of<sp/>-ous<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ism&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ate&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;iti&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ous&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ive&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends(z,<sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ize&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m(z)<sp/>&gt;<sp/>1)<sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref><sp/>=<sp/>z-&gt;<ref refid="structstemmer_1a024d42a47e06bd5207e2494cbfefbf2f" kindref="member">j</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>step5(z)<sp/>removes<sp/>a<sp/>final<sp/>-e<sp/>if<sp/>m(z)<sp/>&gt;<sp/>1,<sp/>and<sp/>changes<sp/>-ll<sp/>to<sp/>-l<sp/>if</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/>m(z)<sp/>&gt;<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>step5(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z)</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref><sp/>=<sp/>z-&gt;<ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/>z-&gt;<ref refid="structstemmer_1a024d42a47e06bd5207e2494cbfefbf2f" kindref="member">j</ref><sp/>=<sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b[z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>m(z);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&gt;<sp/>1<sp/>||<sp/>a<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>!cvc(z,<sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref><sp/>-<sp/>1))<sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>--;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b[z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>doublec(z,<sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>)<sp/>&amp;&amp;<sp/>m(z)<sp/>&gt;<sp/>1)<sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>--;</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In<sp/>stem(z,<sp/>b,<sp/>k),<sp/>b<sp/>is<sp/>a<sp/>char<sp/>pointer,<sp/>and<sp/>the<sp/>string<sp/>to<sp/>be<sp/>stemmed<sp/>is</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/>from<sp/>b[0]<sp/>to<sp/>b[k]<sp/>inclusive.<sp/><sp/>Possibly<sp/>b[k+1]<sp/>==<sp/>&apos;\0&apos;,<sp/>but<sp/>it<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/>important.<sp/>The<sp/>stemmer<sp/>adjusts<sp/>the<sp/>characters<sp/>b[0]<sp/>...<sp/>b[k]<sp/>and<sp/>returns</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/><sp/>the<sp/>new<sp/>end-point<sp/>of<sp/>the<sp/>string,<sp/>k&apos;.<sp/>Stemming<sp/>never<sp/>increases<sp/>word</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/>length,<sp/>so<sp/>0<sp/>&lt;=<sp/>k&apos;<sp/>&lt;=<sp/>k.</highlight></codeline>
<codeline lineno="341"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1a9adc1c124ef5b0c5a0ebee4f5c7c60d9" kindref="member">stem</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>)</highlight></codeline>
<codeline lineno="344"><highlight class="normal">{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&lt;=<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>;<sp/></highlight><highlight class="comment">/*-DEPARTURE-*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/>z-&gt;<ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref><sp/>=<sp/><ref refid="structstemmer_1a0ae99db94786418a0c4d85a2a15382a5" kindref="member">b</ref>;<sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref><sp/>=<sp/><ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>;<sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>the<sp/>parameters<sp/>into<sp/>z<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>With<sp/>this<sp/>line,<sp/>strings<sp/>of<sp/>length<sp/>1<sp/>or<sp/>2<sp/>don&apos;t<sp/>go<sp/>through<sp/>the</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>stemming<sp/>process,<sp/>although<sp/>no<sp/>mention<sp/>is<sp/>made<sp/>of<sp/>this<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>published<sp/>algorithm.<sp/>Remove<sp/>the<sp/>line<sp/>to<sp/>match<sp/>the<sp/>published</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>algorithm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/>step1ab(z);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>step1c(z);<sp/>step2(z);<sp/>step3(z);<sp/>step4(z);<sp/>step5(z);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z-&gt;<ref refid="structstemmer_1a587d5f8fd5c491688bc91e7d3b5e262e" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">/*--------------------stemmer<sp/>definition<sp/>ends<sp/>here------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>malloc,<sp/>free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>isupper,<sp/>islower,<sp/>tolower<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>buffer<sp/>for<sp/>words<sp/>tobe<sp/>stemmed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INC<sp/>50<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>units<sp/>in<sp/>which<sp/>s<sp/>is<sp/>increased<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_max<sp/>=<sp/><ref refid="stemming_8cpp_1af735670d9b1cd3dfa2d927db387f7123" kindref="member">INC</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>offset<sp/>in<sp/>s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LETTER(ch)<sp/>(isupper(ch)<sp/>||<sp/>islower(ch))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1ace84d1929c729aba783d284e05952f7f" kindref="member">stemfile</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z,<sp/>FILE<sp/>*<sp/>f)</highlight></codeline>
<codeline lineno="374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream<sp/>myfile;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>myfile.open<sp/>(</highlight><highlight class="stringliteral">&quot;nmn.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="stemming_8cpp_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>getc(f);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cout&lt;&lt;ch&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/>EOF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(1)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="stemming_8cpp_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>i_max)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>i_max<sp/>+=<sp/><ref refid="stemming_8cpp_1af735670d9b1cd3dfa2d927db387f7123" kindref="member">INC</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)realloc(s,<sp/>i_max<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>=<sp/>tolower(ch);<sp/></highlight><highlight class="comment">/*<sp/>forces<sp/>lower<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[i]<sp/>=<sp/>ch;<sp/>i++;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>=<sp/>getc(f);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="stemming_8cpp_1a41e26001c91e6d127101f7086fa317a7" kindref="member">LETTER</ref>(ch))<sp/>{<sp/>ungetc(ch,f);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[<ref refid="stemming_8cpp_1a9adc1c124ef5b0c5a0ebee4f5c7c60d9" kindref="member">stem</ref>(z,<sp/>s,<sp/>i<sp/>-<sp/>1)<sp/>+<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>previous<sp/>line<sp/>calls<sp/>the<sp/>stemmer<sp/>and<sp/>uses<sp/>its<sp/>result<sp/>to</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero-terminate<sp/>the<sp/>string<sp/>in<sp/>s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>myfile<sp/>&lt;&lt;s;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>cout&lt;&lt;s&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>myfile.close();</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="stemming_8cpp_1a554aac5597c2ca775a8e32704d65199d" kindref="member">stemstring</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structstemmer" kindref="compound">stemmer</ref><sp/>*<sp/>z,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>f)</highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="dictionary_8cpp_1a979d82a104752ab2b08fb304cf3e9fe2" kindref="member">ans</ref>;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(f[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>f[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">++];</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//cout&lt;&lt;(char)ch&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/>EOF)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(1)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="stemming_8cpp_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>i_max)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>i_max<sp/>+=<sp/><ref refid="stemming_8cpp_1af735670d9b1cd3dfa2d927db387f7123" kindref="member">INC</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)realloc(s,<sp/>i_max<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>=<sp/>tolower(ch);<sp/></highlight><highlight class="comment">/*<sp/>forces<sp/>lower<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[i]<sp/>=<sp/>ch;<sp/>i++;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>=<sp/>f[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">++];</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="stemming_8cpp_1a41e26001c91e6d127101f7086fa317a7" kindref="member">LETTER</ref>(ch))<sp/>{<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">--;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[<ref refid="stemming_8cpp_1a9adc1c124ef5b0c5a0ebee4f5c7c60d9" kindref="member">stem</ref>(z,<sp/>s,<sp/>i<sp/>-<sp/>1)<sp/>+<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>previous<sp/>line<sp/>calls<sp/>the<sp/>stemmer<sp/>and<sp/>uses<sp/>its<sp/>result<sp/>to</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero-terminate<sp/>the<sp/>string<sp/>in<sp/>s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>ans+=s;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dictionary_8cpp_1a979d82a104752ab2b08fb304cf3e9fe2" kindref="member">ans</ref>;</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="stemming.cpp"/>
  </compounddef>
</doxygen>
